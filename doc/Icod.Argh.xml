<?xml version="1.0" encoding="utf-8"?>
<!--
    Icod.Argh is a command-line arguments handler and processor.
    Copyright (C) 2025 Timothy J. Bruce

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
    USA
-->
<types>

	<type name="Processor">
		<member name="">
			<summary>
				The Processor performs the work of analyzing and parsing out the args
				based on the supplied <see cref="T:Icod.Argh.Definition">Definition</see> list.  
				Once the args have been parsed, the Processor instance can be queried to see 
				which switches were present, if they have associated values, and so forth.
			</summary>
			<example>
				<code lang="cs">
public static System.Int32 Main( System.String[] args ) {
	var processor = new Icod.Argh.Processor(
		new Icod.Argh.Definition[] {
			// help and copyright unary flags which perform respective display and then exit
			// (ex: --help), (ex: --copyright)
			new Icod.Argh.Definition( "help", new System.String[] { "-h", "--help", "/help" } ),
			new Icod.Argh.Definition( "copyright", new System.String[] { "-c", "--copyright", "/copyright" } ),

			// input is optional, but if present must precede a file pathname (ex: --input C:\foo\bar.baz)
			new Icod.Argh.Definition( "input", new System.String[] { "-i", "--input", "/input" } ),

			// suffix is required and must precede a string (ex: --suffix "this string has spaces")
			new Icod.Argh.Definition( "suffix", new System.String[] { "-s", "--suffix", "/suffix" } ),

			// trim is a unary flag, used on its own (ex: --trim)
			new Icod.Argh.Definition( "trim", new System.String[] { "-t", "--trim", "/trim" } ),
		},
		System.StringComparer.OrdinalIgnoreCase
	);
	processor.Parse( args );

	if ( processor.Contains( "help" ) ) {
		PrintUsage();
		return 1;
	} else if ( processor.Contains( "copyright" ) ) {
		PrintCopyright();
		return 1;
	}

	System.Func&lt;System.String?, System.Collections.Generic.IEnumerable=&lt;System.String&gt;&gt; reader;
	// input is optional
	if ( processor.TryGetValue( "input", true, out var inputPathName ) ) {
		// if present it must specify a file pathname
		if ( System.String.IsNullOrEmpty( inputPathName ) ) {
			PrintUsage();
			return 1;
		} else {
			reader = x => ReadFile( x! );
		}
	} else {
		// if not specified, then we read from StdIn
		reader = x => ReadStdIn();
	}

	if ( 
		( !processor.TryGetValue( "suffix", true, out var suffix ) )
		|| System.String.IsNullOrEmpty( suffix )
	) {
		PrintUsage();
		return 1;
	}

	System.Boolean trim = processor.Contains( "trim" );

	// do work

	return 0;
}
				</code>
			</example>
            <seealso cref="T:Icod.Argh.Definition" />
        </member>
		<member name="#ctor(System.Collections.Generic.IEnumerable`1)">
			<summary>
				Creates a new instance of the Processor class with the specified switch defintion list.
			</summary>
			<param name="definition">
				The list of <see cref="T:Icod.Argh.Definition">Definition</see> elements which describe how
				the command-line <see cref="T:System.String">String</see> is to be processed.
			</param>
			<remarks>
				Once a Processor is initialized with a Definition list, it can process a String
				(the command-line args) and then it may be queried to report if any particular
				well-formed switches are present.  Well-formed switches are usually nullary
				(such as "/help" or "-h") or unary (such as "--input ./foo.txt"), but they may
				have any number of arguments (such as "--fileList ./foo.txt ../bar.txt /var/spool/quux.eml").
				For arguments which do not have a switch-style prefix (such as "/query" or "--query" or "-q")
				the args array will need to be indexed manually.  For this reason it is best to
				require all command-line argument inputs be well-formed.
			</remarks>
		</member>
		<member name="#ctor(System.Collections.Generic.IEnumerable`1,System.StringComparer)">
			<summary>
				Creates a new instance of the Processor class with the specified switch defintion list 
				and uses the specific comparer to process the supplied args.
			</summary>
			<param name="definition">
				The list of <see cref="T:Icod.Argh.Definition">Definition</see> elements which describe how
				the command-line <see cref="T:System.String">String</see> is to be processed.
			</param>
			<param name="comparer">
				The comparer to use when matching inputs to switch definitions.
			</param>
			<remarks>
				Once a Processor is initialized with a Definition list, it can process a String
				(the command-line args) and then it may be queried to report if any particular
				well-formed switches are present.  Well-formed switches are usually nullary
				(such as "/help" or "-h") or unary (such as "--input ./foo.txt"), but they may
				have any number of arguments (such as "--fileList ./foo.txt ../bar.txt /var/spool/quux.eml").
				For arguments which do not have a switch-style prefix (such as "/query" or "--query" or "-q")
				the args array will need to be indexed manually.  For this reason it is best to
				require all command-line argument inputs be well-formed.
			</remarks>
		</member>
		<member name="Item[System.String]">
			<summary>
				Gets the value associated with the specified switch name.
			</summary>
			<param name="name">
				The name of the switch.
			</param>
			<returns>
				The first value associated with that particular switch name.
			</returns>
			<exceptions>
				<see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see>
				<see cref="T:System.ArgumentNullException">ArgumentNullException</see>
				<see cref="T:System.InvalidOperationException">InvalidOperationException</see>
			</exceptions>
		</member>
		<member name="Contains(System.String)">
			<summary>
				Determines whether the specifid switch name has been mapped.
			</summary>
			<param name="name">
				The name of the switch.
			</param>
			<returns>
				<c langword="true" /> if that particular switch name has been mapped; otherwise <c langword="false" />.
			</returns>
			<exceptions>
				<see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see>
			</exceptions>
		</member>
		<member name="GetValue(System.String)">
			<summary>
				Gets the value associated with the specified switch.
			</summary>
			<param name="name">
				The name of the switch whose value to get.
			</param>
			<returns>
				The first <see cref="T:System.String" /> value of the specified switch; 
				otherwise an exception is thrown.
			</returns>
			<exceptions>
				<see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see>
				<see cref="T:System.ArgumentNullException">ArgumentNullException</see>
				<see cref="T:System.InvalidOperationException">InvalidOperationException</see>
			</exceptions>
		</member>
		<member name="TryGetValue(System.String,System.Boolean,System.String@)">
			<summary>
				Gets the value associated with the specified switch.
			</summary>
			<param name="name">
				The name of the switch whose value to get.
			</param>
			<param name="value">
				When this method returns, the value associated with the specified switch, if ot is found; 
				otherwise, <see langword="null" />. This parameter is passed uninitialized.
			</param>
			<returns>
				<see langword="true" /> if the specified switch has been defined; 
				otherwise, <see langword="false" />.
			</returns>
			<remarks>
				This method combines the functionality of the 
				<see cref="P:Icod.Argh.Processor.Contains(System.String)">Contains</see> method and 
				the <see cref="P:Icod.Argh.Processor.Item[System.String]">Item[]</see> property.

				If the specified switch is not found, then the return value parameter 
				<see langword="null" />.
			</remarks>
			<exceptions>
				<see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see>
				<see cref="T:System.ArgumentNullException">ArgumentNullException</see>
				<see cref="T:System.InvalidOperationException">InvalidOperationException</see>
			</exceptions>
		</member>
		<member name="Parse(System.String[])">
			<example>
				<code lang="cs">
public static System.Int32 Main( System.String[] args ) {
	var processor = new Icod.Argh.Processor(
		new Icod.Argh.Definition[] {
			// help and copyright unary flags which perform respective display and then exit
			// (ex: --help), (ex: --copyright)
			new Icod.Argh.Definition( "help", new System.String[] { "-h", "--help", "/help" } ),
			new Icod.Argh.Definition( "copyright", new System.String[] { "-c", "--copyright", "/copyright" } ),

			// input is optional, but if present must precede a file pathname (ex: --input C:\foo\bar.baz)
			new Icod.Argh.Definition( "input", new System.String[] { "-i", "--input", "/input" } ),

			// suffix is required and must precede a string (ex: --suffix "this string has spaces")
			new Icod.Argh.Definition( "suffix", new System.String[] { "-s", "--suffix", "/suffix" } ),

			// trim is a unary flag, used on its own (ex: --trim)
			new Icod.Argh.Definition( "trim", new System.String[] { "-t", "--trim", "/trim" } ),
		},
		System.StringComparer.OrdinalIgnoreCase
	);
	processor.Parse( args );

	if ( processor.Contains( "help" ) ) {
		PrintUsage();
		return 1;
	} else if ( processor.Contains( "copyright" ) ) {
		PrintCopyright();
		return 1;
	}

	System.Func&lt;System.String?, System.Collections.Generic.IEnumerable=&lt;System.String&gt;&gt; reader;
	// input is optional
	if ( processor.TryGetValue( "input", true, out var inputPathName ) ) {
		// if present it must specify a file pathname
		if ( System.String.IsNullOrEmpty( inputPathName ) ) {
			PrintUsage();
			return 1;
		} else {
			reader = x => ReadFile( x! );
		}
	} else {
		// if not specified, then we read from StdIn
		reader = x => ReadStdIn();
	}

	if (
		( !processor.TryGetValue( "suffix", true, out var suffix ) )
		|| System.String.IsNullOrEmpty( suffix )
	) {
		PrintUsage();
		return 1;
	}

	System.Boolean trim = processor.Contains( "trim" );

	// do work

	return 0;
}
				</code>
			</example>
		</member>
	</type>

	<type name="Definition">
		<member name="">
			<summary>
				The Definition class is used to define a switch, and what 
				possible forms it can take on the command line.
			</summary>
			<remarks>
				For example, 
				it is quite common for <c lang="sh">/help</c> to be supported 
				by both <c lang="sh">-h</c> or <c lang="sh">--help</c>.  
				Icod.Argh permits one definition for any given switch no 
				matter how many forms it make take.
				Example:
				<code lang="cs">
					var help = Icod.Argh.Definition( "help", new System.String[] { "-h", "--help", "/help" } );
				</code>
			</remarks>
		</member>
		<member name="Name">
			<summary>
				Gets the name of the switch.
			</summary>
			<returns>
				The <see cref="T:System.String" /> name of the switch.
			</returns>
			<remarks>
				The name, such as <c>Help</c>, must not be confused with it's possible expressions,
				such as <c lang="sh">/help</c>, <c lang="sh">-h</c>, or <c lang="sh">--help</c>; 
				all of which could be associated with <c>Help</c>.
			</remarks>
		</member>
		<member name="Switch">
			<summary>
			</summary>
			<returns>
				The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.String" />
				elements associated with the <see cref="T:System.String" />.  For example, <c>Help</c> 
				might be associated with <c lang="sh">/help</c>, <c lang="sh">-h</c>, or 
				<c lang="sh">--help</c>, or all of them.
			</returns>
		</member>
    </type>

</types>